/* У цьому завдання вам належить реалізувати сценарій життя, де людина, ключ і будинок взаємодіють один з одним.

Ключ (Key): Створіть клас Key. У нього має бути одна приватна властивість signature, яка генерується випадково при створенні об'єкта цього класу (наприклад Math.random()). Також цей клас повинен мати метод getSignature, який повертає значення властивості signature.

Людина (Person): Створіть клас Person. Конструктор цього класу приймає об'єкт класу Key і зберігає їх у приватному властивості key. Клас Person повинен мати метод getKey, який повертає збережений ключ.

Дім (House): Створіть абстрактний клас House. Цей клас має дві властивості: door, яка може бути відкрита (true), або закрита (false), і key, яка зберігає об'єкт класу Key. У цьому класі також повинен бути метод comeIn, який додає об'єкт класу Person у масив tenants, якщо door відкрита. Ваш абстрактний клас House також повинен мати абстрактний метод OpenDoor, який приймає об'єкт класу Key.

Мій будинок (MyHouse): Створіть клас MyHouse, який успадковується від абстрактного класу House. Реалізуйте метод openDoor у цьому класі. Якщо ключ, переданий цьому методу, збігається з ключем, збереженим як key, то двері відчиняються.

Після реалізації всіх класів створіть об'єкти для кожного класу та спробуйте відтворити сценарій, в якому людина приходить додому.
 */

// Класс Key представляет ключ с определенной подписью.
class Key {
    private signature: string; // Приватное свойство для хранения подписи ключа
  
    constructor() {
      // Генерация случайной подписи для ключа при создании объекта класса Key (это выражение создает случайное число с помощью Math.random(), затем преобразует его в строку в шестнадцатеричной системе счисления (с использованием букв от a до z и цифр от 0 до 9), а затем возвращает подстроку, начиная с седьмого символа (включительно) этой строки. Это позволяет создать случайную строку длиной 7 символов, которая может использоваться в качестве подписи ключа)
    /* toString(36): Этот метод преобразует число в строку в указанной системе счисления. 
        В  данном случае, 36 указывает систему счисления на основе всех букв английского алфавита и цифр от 0 до 9.
        substring(7): Этот метод берет подстроку из строки, начиная с индекса 7 и до конца строки. */

      this.signature = Math.random().toString(36).substring(7);
    }
  
    public getSignature() {
      return this.signature; // Возвращает сгенерированную подпись
    }
  }
  
  // Класс Person описывает человека с ключом.
  class Person {
    private key: Key; // Приватное свойство, хранящее ключ человека
  
    constructor(key: Key) {
      this.key = key; // Присваивание переданного ключа приватному свойству key
    }
  
    public getKey() {
      return this.key; // Возвращает ключ человека
    }
  }
  
  // Абстрактный класс House описывает дом и его состояние двери.
  abstract class House {
    protected door: boolean = false; // Дверь по умолчанию закрыта
    protected key: Key; // Ключ для открытия двери
  
    public abstract openDoor(key: Key): void; // Абстрактный метод открытия двери
  
    public comeIn(person: Person) {
      if (this.door) {
        // Логика, добавляющая человека в дом, если дверь открыта
        console.log('Person is coming in.');
      } else {
        console.log('Door is closed.');
      }
    }
  }
  
  // Класс MyHouse наследует абстрактный класс House и реализует открытие двери.
  class MyHouse extends House {
    constructor(key: Key) {
      super();
      this.key = key; // Присваивание ключа для открытия двери
    }
  
    public openDoor(key: Key) {
      if (this.key.getSignature() === key.getSignature()) {
        // Сравниваем подписи ключей, если совпадают - открываем дверь
        this.door = true;
        console.log('Door is opened.');
      } else {
        console.log('Invalid key.');
      }
    }
  }
  
  // Создание объектов для тестирования взаимодействия персоны и дома с ключом
  const key = new Key(); // Создание нового ключа
  const house = new MyHouse(key); // Создание дома с переданным ключом
  const person = new Person(key); // Создание персоны с переданным ключом
  
  // Попытка открыть дверь дома и войти в него
  house.openDoor(person.getKey());
  house.comeIn(person);
  